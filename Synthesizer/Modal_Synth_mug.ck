/*
Modal synthesizer used in the Sound & Music Computing paper "Perceptual Evaluation of Modal Synthesis for Impact-Based Sounds".
It uses NUM_MODES modes as filters to a white noise instance.
The residue is triggered from disk.
Based on Perry Cook's code, found in https://www.kadenze.com/courses/physics-based-sound-synthesis-for-games-and-interactive-systems-iv
*/
    100 => int NUM_MODES;
    ResonZ modes[NUM_MODES];
//Frequencies and amplitudes
[[ 3746.777344 , 1.000000 ], 
[ 2987.731934 , 0.413080 ], 
[ 9692.633057 , 0.130724 ], 
[ 3701.019287 , 0.018555 ], 
[ 1442.724609 , 0.180487 ], 
[ 3789.843750 , 0.005333 ], 
[ 8618.664551 , 0.021285 ], 
[ 7558.154297 , 0.082930 ], 
[ 1585.382080 , 0.093680 ], 
[ 7601.220703 , 0.098966 ], 
[ 9854.132080 , 0.003752 ], 
[ 7765.411377 , 0.020900 ], 
[ 7227.081299 , 0.004632 ], 
[ 8820.538330 , 0.003422 ], 
[ 3655.261230 , 0.004501 ], 
[ 9735.699463 , 0.001256 ], 
[ 9008.953857 , 0.005252 ], 
[ 3832.910156 , 0.006023 ], 
[ 3875.976563 , 0.003014 ], 
[ 9897.198486 , 0.009816 ], 
[ 6228.479004 , 0.043768 ], 
[ 9808.374023 , 0.004627 ], 
[ 4987.628174 , 0.127153 ], 
[ 8182.617188 , 0.040075 ], 
[ 3609.503174 , 0.002073 ], 
[ 8885.137939 , 0.004210 ], 
[ 7270.147705 , 0.000515 ], 
[ 4608.105469 , 0.017686 ], 
[ 3919.042969 , 0.002028 ], 
[ 3141.156006 , 0.001015 ], 
[ 9052.020264 , 0.001171 ], 
[ 6311.920166 , 0.002389 ], 
[ 8963.195801 , 0.002483 ], 
[ 8572.906494 , 0.001905 ], 
[ 7009.057617 , 0.004125 ], 
[ 8661.730957 , 0.001273 ], 
[ 9940.264893 , 0.001248 ], 
[ 3030.798340 , 0.001384 ], 
[ 9646.875000 , 0.001082 ], 
[ 7181.323242 , 0.000941 ], 
[ 3563.745117 , 0.001073 ], 
[ 12855.322266 , 0.006400 ], 
[ 9095.086670 , 0.000579 ], 
[ 7313.214111 , 0.003090 ], 
[ 9148.919678 , 0.000355 ], 
[ 7719.653320 , 0.004481 ], 
[ 3962.109375 , 0.001149 ], 
[ 7356.280518 , 0.002250 ], 
[ 8774.780273 , 0.000640 ], 
[ 6182.720947 , 0.000787 ], 
[ 3073.864746 , 0.000490 ], 
[ 7644.287109 , 0.008799 ], 
[ 14012.731934 , 0.002078 ], 
[ 3517.987061 , 0.001944 ], 
[ 7808.477783 , 0.001339 ], 
[ 9191.986084 , 0.000067 ], 
[ 6963.299561 , 0.000537 ], 
[ 6354.986572 , 0.001926 ], 
[ 4005.175781 , 0.000514 ], 
[ 8704.797363 , 0.001339 ], 
[ 5127.593994 , 0.001003 ], 
[ 4250.115967 , 0.001684 ], 
[ 12397.741699 , 0.001108 ], 
[ 7052.124023 , 0.002073 ], 
[ 10023.706055 , 0.000226 ], 
[ 12809.564209 , 0.000585 ], 
[ 3472.229004 , 0.000407 ], 
[ 8527.148438 , 0.002014 ], 
[ 6136.962891 , 0.000673 ], 
[ 6398.052979 , 0.001656 ], 
[ 12898.388672 , 0.000876 ], 
[ 9601.116943 , 0.001830 ], 
[ 11377.606201 , 0.000224 ], 
[ 7135.565186 , 0.000646 ], 
[ 6091.204834 , 0.000417 ], 
[ 11420.672607 , 0.000325 ], 
[ 7399.346924 , 0.002397 ], 
[ 10066.772461 , 0.000524 ], 
[ 10626.635742 , 0.001759 ], 
[ 6441.119385 , 0.000929 ], 
[ 8136.859131 , 0.001320 ], 
[ 12351.983643 , 0.000721 ], 
[ 9539.208984 , 0.000341 ], 
[ 18612.762451 , 0.001207 ], 
[ 17877.941895 , 0.000036 ], 
[ 8481.390381 , 0.001140 ], 
[ 11331.848145 , 0.000084 ], 
[ 12306.225586 , 0.000103 ], 
[ 8050.726318 , 0.001214 ], 
[ 17832.183838 , 0.000053 ], 
[ 12198.559570 , 0.000203 ], 
[ 11463.739014 , 0.000126 ], 
[ 17955.999756 , 0.000203 ], 
[ 12440.808105 , 0.000423 ], 
[ 12260.467529 , 0.000541 ], 
[ 12152.801514 , 0.000211 ], 
[ 15538.897705 , 0.003358 ], 
[ 13966.973877 , 0.000335 ], 
[ 17344.995117 , 0.000626 ], 
[ 17786.425781 , 0.000046 ]]
 @=> float freqsNamps[][];

//Noise, envelope and residue. 
    SndBuf residue => Gain direct => dac;
    //Point to the current directory.
    me.dir() => string path;
    //Load the sample. It has to be in the current directory.
    path + "Residue.wav" => residue.read;
    Noise n => ADSR hit;
    (ms,10::ms,0.0,ms) => hit.set;

//Random frequency, gain and Q.
for (int i; i < NUM_MODES; i++)  {
    hit => modes[i] => dac;
    // frequency randomization (frequency ± frequency / 300)
    Math.random2f(freqsNamps[i][0] - (freqsNamps[i][0] / 300) ,freqsNamps[i][0] + (freqsNamps[i][0] / 300)) => modes[i].freq;
    // gain randomization (gain ± gain / 5)
    Math.random2f(freqsNamps[i][1] - (freqsNamps[i][1])/5 ,freqsNamps[i][1] + (freqsNamps[i][1])/5) => modes[i].gain;
    // filter Q randomization (800 - 1200)
    Math.random2f(800,1200) => modes[i].Q;
}

//Residue rate (and therefore pitch) randomized
    Math.random2f(0.99,1.01) => residue.rate;

//deterministic and stochastic gains randomized
    Math.random2f(5,30) => hit.gain;
    Math.random2f(0.7,1) => direct.gain;

//Hit the model
    1 => hit.keyOn;
    0 => residue.pos;
    10*second => now;
